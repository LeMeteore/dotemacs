(require 's)

(setq helm-fkey-keymap
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map helm-map)
    (dolist (key (number-sequence ?! ?~))
      (define-key map (kbd (string key)) 'exit-minibuffer))
    map))

(defun helm-fkey-call-function (data)
  (let ((command (caddr (assoc (string last-command-event) data))))
    (when command
      (command-execute (intern command) 'record))))

(defun helm-fkey-propertize-candidate (str)
  (let* ((split-str (s-split "\\(\\[\\|\\]\\)" str))
         (beg (first split-str))
         (opening-bracket "[")
         (key (second split-str))
         (closing-bracket "]")
         (rest (third split-str)))
    (s-concat beg
              (propertize opening-bracket 'face 'helm-fkey-bracket-face)
              (propertize key 'face 'helm-fkey-key-face)
              (propertize closing-bracket 'face 'helm-fkey-bracket-face)
              rest)))

(defun helm-fkey-prettify (candidates)
  (mapcar 'helm-fkey-propertize-candidate candidates))

(defun wasa-irc ()
  "Connect to all my IRC servers"
  (interactive)
  (circe "Bitlbee")
  (circe "Freenode"))

;;------------------

(defun helm-f1 ()
  (interactive)
  (let* ((data '(("a" "[A]propos" "helm-apropos")
                 ("b" "Describe [B]indings" "describe-bindings")
                 ("c" "Describe [C]har" "describe-char")
                 ("d" "[D]ocumentation" "apropos-documentation")
                 ("f" "Describe [F]unction" "describe-function")
                 ("F" "Find [F]unction" "find-function")
                 ("i" "[I]nfo" "info")
                 ("k" "Describe [K]ey" "describe-key")
                 ("l" "[L]ossage" "view-lossage")
                 ("m" "Describe [M]odes" "describe-mode")
                 ("p" "[P]ackages by category" "finder-by-keyword")
                 ("v" "Describe [V]ariable" "describe-variable")
                 ("V" "Find [V]ariable" "find-variable")))
         (source '((name . "Help")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f1*")))

(global-set-key (kbd "<f1>") 'helm-f1)

(defun helm-f2 ()
  (interactive)
  (let* ((data '(("c" "[C]olors" "helm-colors")
                 ("f" "[F]ind Library" "find-library")
                 ("g" "Customize [G]roup" "customize-group")
                 ("i" "Package [I]nstall" "package-install")
                 ;;("r" "Package [R]emove" "wasa-package-remove")
                 ("p" "[P]ackage List" "package-list-packages")
                 ("t" "Load [T]heme" "helm-themes")
                 ("v" "Customize [V]ariable" "customize-variable")))
         (source '((name . "Packages")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f2*")))

(global-set-key (kbd "<f2>") 'helm-f2)

(defun helm-f3 ()
  (interactive)
  (let* ((data '(("a" "Imenu [A]nywhere" "helm-imenu-anywhere")
                 ("g" "[G]rep" "helm-do-grep")
                 ("h" "Org [H]eadlines" "helm-org-headlines")
                 ("i" "[I]menu" "helm-imenu")
                 ("m" "[M]ulti-occur" "helm-multi-occur")
                 ("o" "[O]ccur" "helm-occur")))
         (source '((name . "Search")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f3*")))

(global-set-key (kbd "<f3>") 'helm-f3)

(defun helm-f4 ()
  (interactive)
  (let* ((data '(("b" "[B]uffers" "helm-buffers-list")
                 ("f" "[F]ind" "helm-find")
                 ("i" "Find F[i]les" "helm-find-files")
                 ("l" "[L]ocate" "helm-locate")
                 ("t" "Cmd-[T]" "helm-cmd-t")))
         (source '((name . "Find")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f4*")))

(global-set-key (kbd "<f4>") 'helm-f4)

(defun helm-f5 ()
  (interactive)
  (let* ((data '(("c" "[C]alc" "calc")
                 ("e" "[E]val Expression" "helm-eval-expression-with-eldoc")
                 ("i" "[I]ELM" "ielm")
                 ("r" "[R]egexp" "helm-regexp")
                 ("s" "[S]hell" "shell")
                 ("t" "ANSI [T]erm" "ansi-term")
                 ("x" "Calculate E[x]pression" "helm-calcul-expression")))
         (source '((name . "Eval")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f5*")))

(global-set-key (kbd "<f5>") 'helm-f5)

(defun helm-f6 ()
  (interactive)
  (let* ((data '(("e" "[E]macs manual" "info-emacs-manual")
                 ("m" "[M]an" "helm-man-woman")
                 ("o" "[O]rgcard" "helm-orgcard")
                 ("p" "[P]ydoc" "helm-pydoc")))
         (source '((name . "Doc")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f6*")))

(global-set-key (kbd "<f6>") 'helm-f6)

(defun helm-f7 ()
  (interactive)
  (let* ((data '(("l" "[L]aTeX Math" "helm-insert-latex-math")
                 ("u" "[U]CS" "helm-ucs")))
         (source '((name . "Insert")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f7*")))

(global-set-key (kbd "<f7>") 'helm-f7)

(defun helm-f8 ()
  (interactive)
  (let* ((data '(("g" "[G]oogle Suggest" "helm-google-suggest")
                 ("p" "Emacs [P]rocess List" "helm-list-emacs-process")
                 ("s" "[S]urfraw" "helm-surfraw")
                 ("t" "[T]op" "helm-top")
                 ("w" "[W]orld time" "helm-world-time")))
         (source '((name . "Misc")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f8*")))

(global-set-key (kbd "<f8>") 'helm-f8)

(defun helm-f9 ()
  (interactive)
  (let* ((data '(("d" "Tumblr [D]ashboard" "tumblesocks-view-dashboard")
                 ("f" "News [F]eeds" "elfeed")
                 ("i" "[I]RC" "wasa-irc")
                 ;;("m" "E-[M]ail" "mu4e")
                 ("t" "[T]etris" "tetris")))
         (source '((name . "Distractions")
                   (candidates . (lambda () (mapcar 'cadr data)))
                   (candidate-transformer helm-fkey-prettify)
                   (action ("Execute" . (lambda (_) (helm-fkey-call-function data)))))))
    (helm :sources 'source :keymap helm-fkey-keymap :prompt "Key: " :buffer "*helm-f9*")))

(global-set-key (kbd "<f9>") 'helm-f9)

;;------------------
;; helm-pacman, helm-aur (compare helm-apt)
;; helm-dictionary
;; helm-project-persist, helm-projectile
;;
;; helm-etags-select
;; helm-semantic

(provide 'helm-fkeys)
